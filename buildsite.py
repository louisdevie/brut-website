import os, re, shutil

MINIFY_IGNORE = r'(\B\s+\B)|(\B\s+\b)|(\b\s+\B)'

PAGENAME_DIRECTIVE = r'(<!--PAGENAME ")(.+)("-->)'
STYLE_DIRECTIVE = r'(<!--STYLE )([a-z]+)(-->)'
SCRIPT_DIRECTIVE = r'(<!--SCRIPT )([a-z]+)(-->)'
DEADEND_DIRECTIVE = r'<!--DEADEND-->'

def ensure_fwd_slashes(path):
		return path.replace(os.path.sep, '/')
		
def minify(source):
	minimum = [re.sub(MINIFY_IGNORE, '', l) for l in source]
	minimum = [l.replace('$SPACE', ' ') for l in minimum]
	minimum = [l.replace('$INFO', '/*this file was generated by buildsite*/') for l in minimum]
	return ''.join(minimum)

def main():
	print('[buildsite custom CMS]')
	clear()
	mktree()
	copy_css()
	copy_img()
	gen_pages()
	gen_search()

def clear():
	print('Checking for a previous build ...')
	if os.path.isdir('site'):
		print('   found one - removing site/ and eveything under it', end=' ... ')
		shutil.rmtree('site')
		print('done')
	else:
		print('   no build found - moving on ...')

def mktree():
	print('Generating base tree ...')
	os.mkdir('site')
	os.mkdir('site/siteres')
	os.mkdir('site/siteres/images')
	os.mkdir('site/siteres/style')
	os.mkdir('site/siteres/scripts')

def copy_img():
	print('Copying images ...')
	for file in os.listdir('source/images/'):
		src = os.path.join('source/images/', file)
		dest =  os.path.join('site/siteres/images/', file)
		print(f'   {src} -> {dest}', end=' ... ')
		with open(src, 'rb') as fd:
			srccontent = fd.read()
		with open(dest, 'wb+') as fd:
			fd.write(srccontent)
		print('done')
	
def copy_css():
	print('Copying style sheets ...')
	for file in os.listdir('source/style/'):
		src = os.path.join('source/style/', file)
		dest =  os.path.join('site/siteres/style/', '.min'.join(os.path.splitext(file)))
		print(f'   {src} -> {dest}', end=' ... ')
		with open(src, 'rt') as fd:
			srccontent = fd.readlines()
		with open(dest, 'wt+') as fd:
			fd.write(minify(srccontent))
		print('done')
		
def gen_pages():
	print('Generating pages ...')

	print('   loading document templates', end=' ... ')
	with open('source/templates/document.html', 'rt') as fd:
		doc = fd.read()
	with open('source/templates/footer.html', 'rt') as fd:
		footer = fd.read()
	with open('source/templates/header.html', 'rt') as fd:
		header = fd.read()
	with open('source/templates/deadend.html', 'rt') as fd:
		deadend = fd.read()
	print('done')

	pagenames = dict()
	for root, dirs, files in os.walk('source/pages'):
		root = ensure_fwd_slashes(root)
		relsrc = root.split('/')[2:]
		depth = len(relsrc)
		rel = os.path.join('site/', '/'.join(relsrc))
		if not os.path.isdir(rel):
			os.mkdir(rel)

		for file in files:
			src = os.path.join(root, file)
			dest =  os.path.join(rel, file)
			print(f'   {dest} from {src}', end=' ... ')
			pname = None
			styles = list()
			scripts = list()
			with open(src, 'rt', encoding='utf-8') as fd:
				srcdoc = fd.read()
			for _, name, _ in re.findall(PAGENAME_DIRECTIVE, srcdoc):
				pname = name
				fname = os.path.splitext(file)[0]
				if os.path.isdir(os.path.join(root, fname)):
					pagenames[fname] = pname
				break
			else:
				raise AssertionError('no PAGENAME directive given')
			for _, style, _ in re.findall(STYLE_DIRECTIVE, srcdoc):
				styles.append(os.path.join('../'*depth, 'siteres/style/', style+'.min.css'))
			for _, script, _ in re.findall(SCRIPT_DIRECTIVE, srcdoc):
				scripts.append(os.path.join('../'*depth, 'siteres/scripts/', style+'.min.js'))

			pbtn = hbtn = ''
			if depth == 0:
				if file != 'index.html':
					pbtn = f'<a href="index.html" class="parent-btn">Retour à <strong>Accueil</strong></a>'
			else:
				hbtn = f'<a href="{"../"*depth}index.html" class="home-btn">Retour à <strong>Accueil</strong></a>'
				pbtn = f'<a href="../{relsrc[-1]}.html" class="parent-btn">Retour à <strong>{pagenames[relsrc[-1]]}</strong></a>'

			pagecontent = header.replace(
							'$PAGENAME', pname
						).replace(
								'$HOMEBTN', hbtn 
						).replace(
								'$PARENTBTN', pbtn 
						)
			

			if re.findall(DEADEND_DIRECTIVE, srcdoc):
				pagecontent += deadend
			else:
				pagecontent += srcdoc

			pagecontent += footer.replace(
				'$DEST', dest
			).replace(
				'$SOURCE', 'Source de la page'
			).replace(
				'$CONTRIBUTE', 'Contribuer / Signaler un problème'
			).replace(
				'$ABOUT', 'À propos'
			).replace(
				'$ROOT', '../'*depth
			)

			page = doc.replace(
				'$PAGENAME', pname
			).replace(
				'$STYLES', ''.join([f'<link rel="stylesheet" type="text/css" href="{s}">' for s in styles])
			).replace(
				'$SCRIPTS', ''.join([f'<script src="{s}"></script>' for s in scripts])
			).replace(
				'$BODY', pagecontent
			)
			with open(dest, 'wt+', encoding='utf-8') as fd:
				fd.write(page)

			print('done')

def gen_search():
	print('Generating search script ...')

	print('   loading template', end=' ... ')
	with open('source/templates/search.js', 'rt') as fd:
		template = minify(fd.readlines())
	print('done')

	print('  generating search index', end=' ... ')
	print('done')

	print('  generating script', end=' ... ')
	script = template
	with open('site/siteres/scripts/search.min.js', 'wt+', encoding='utf-8') as fd:
		fd.write(script)
	print('done')
		
if __name__ == '__main__':
	main()
